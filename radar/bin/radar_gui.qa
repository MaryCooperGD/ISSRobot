/* 
 * ==============================================================
 * radar_gui.qa
 * ==============================================================
 */   
System radar_gui     
Event sonar : p( Distance, Angle, Num  ) 
Event obstacle       : obstacle(X)   //from WebGUI red button X= near or from actor GUI
Event control        : control( CMD )	//CMD = stop | atpos | go | ready
Event usercmd        : usercmd(X)    //from robot-part of WebGUI;  X=robotgui(CMD) CMD=s(low)

Dispatch polar    : p( Distance, Angle, Num  )    

Context  ctxRadarTfCe16    ip [ host="localhost"  port=8033 ] -standalone //192.168.251.1  
Context  ctxControllerTfCe16 ip [host="localhost" port=8034] //-standalone 
EventHandler evh for sonar -print  {  //event => dispatch
	forwardEvent radar_gui -m polar
	//forwardEvent controltfce16 -m polar
};  
Context  ctxSensorEmitter  ip [ host="localhost"  port=8133 ]            


QActor radar_gui context ctxRadarTfCe16  {	  	/*( R2 )*/  
	Plan init normal        
		println("RADAR init the GUI ... ") ;     
		actorOp activateGui ;
		switchToPlan doWorkMsgs      
	Plan doWorkMsgs 
 		println("RADAR receive") ;                      
		receiveMsg time ( 30000000 )  ; 
		printCurrentMessage ;
		onMsg polar : p(DIST,THETA,NUM) -> actorOp sendDataToGui( DIST,THETA ) ;  
		//sense time(30000000) sonar->continue;
		//onEvent sonar: p(DIST,THETA,Num) -> actorOp sendDataToGui( DIST,THETA ) ; 
 		repeatPlan  
 }

QActor controller context ctxControllerTfCe16{
	Plan init normal
		println("Controller init ...");
		switchToPlan tmp
		
	Plan tmp
		sense time(30000000) sonar->continue;
		println("PROVA");
		//onEvent sonar: p(DIST,THETA,Num) -> forward radar_gui -m polar:p(DIST,THETA,Num);
		repeatPlan
}
 
QActor sensorsonar context ctxSensorEmitter  {    
Rules{
	/* THESE RULES ARE WRITTEN IN THE WorldTheory of the sensorsonar */
	/* CONFIGURATION   */
		//onRaspberry.  
		mysonar( s1, coloryellow, "192.168.251.118").	 
		//mysonar( s2, colorred, "192.168.251.121" ).		 
		//mysonar( s3, colorgreen, "192.168.251.120" ).	 		
	/* SIMULATION DATA */	
		//p(70,0). p(85,20). p(80,40). p(85,60). p(85,80). p(80,100). p(75,120). p(70,140).p(65,160). p(70,180).
		p(80,1,3).p(80,2,3).p(80,3,3).p(80,1,3).p(80,2,3).p(80,3,3).p(80,1,3).p(80,2,3).p(80,3,3).p(80,1,3). 
		p(85,1,3).p(70,2,3).p(70,3,3).p(70,1,3).p(70,2,3).p(70,3,3).p(70,1,3).p(70,2,3).p(70,3,3).p(70,1,3). 
		p(50,1,3).p(50,2,3).p(50,3,3).p(50,1,3).p(50,2,3).p(50,3,3).p(50,1,3).p(50,2,3).p(50,3,3).p(50,1,3). 
	/* RULES */
		sonar(s1,1).
		sonar(s2,2).
		sonar(s3,3).
		numOfSonars(N) :- bagof(sonar(S,P), sonar(S,P), SonarList), length(SonarList,N).	
		setmyposition  :-  
			numOfSonars(N),
			assert( numOfSonars( N ) ),
			mysonar( SONAR, _, _ ), sonar(SONAR,POS), 
			assert( position( POS ) ).		
		obstacledata( p(D,POS,N) ) :- 
			numOfSonars( N ),
			actorOpDone( _,d(D) ), 	//set by actorOp getDistanceFromSonar (1)
			position(POS).
	}	  
 	Plan init normal     
 		println("sensorsonar STARTS")  ;
		[ !? onRaspberry ] actorOp startSonarC ;
  		demo setmyposition ;	//depends on mysonar
 		[ !? position(POS) ] println( position(POS) );
 		[ !? numOfSonars(N) ] println( numOfSonars(N) );
 		switchToPlan workSimulate ;
  		println("sensorsonar workReal")  ;       
  		[ !? onRaspberry ] switchToPlan workReal
 	Plan workSimulate   resumeLastPlan  
  	 	[ !? p(D, POS, N) ] println(p(D, POS, N)) else endPlan  "bye"; 
		[ ?? p(D, POS, N) ] emit sonar : p(D,POS,N) ;
		delay time(500) ;
		repeatPlan 29	 	
	Plan workReal 
		actorOp getDistanceFromSonar ;		//(1)
		[ !? obstacledata( VAL )] println( VAL ) ;
		[ !? obstacledata( VAL )] emit sonar : VAL ;
 		[ ?? actorOpDone(OP,R)] println( R ) ;
 		repeatPlan
}      
