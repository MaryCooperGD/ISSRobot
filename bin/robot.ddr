RobotSystem avatar    
/*       
 * ==============================================================
 * avatar
 * FEATURE : A Robot is a QActor that can execute remote commands
 * TO NOTE :    
 * ==============================================================
 */                          
Event usercmd     : usercmd(X)    //from robot GUI;  X=robotgui(CMD) CMD=s(low)
Event inputcmd    : usercmd(X)    //from input GUI;  X=executeInput( do(G,M) )
Event alarm       : alarm(X)      //from red button  
Event obstacle    : obstacle(X)   //from red button and from SensorObserver
Event sensordata  : sensordata(X) //from SensorObserver
     
Context  ctxAvatar  ip [ host="localhost"  port=8070 ]     -httpserver  	 
EventHandler evh for  obstacle -print ;  
                 
Robot nano0 QActor avatar context ctxAvatar  {                    
   	Plan init normal                                      
  		println("avatar STARTS"  )  ;     		
 		demo loadTheory("./talkTheoryAvatar.pl") ;     
 		[ ?? goalResult(R)]  println(goalResult(R)) ;
  		//switchToPlan initToMove;  
  		//switchToPlan cmdDriven;    
  		println("START START START START");
  		//robotLeft   speed(70)   time(10000 );
 	    //robotRight  speed(70)   time(10000 );
 	    robotForward speed(100) time(5000);
 	    robotBackward speed(100) time(5000);
 		println("ENDS" )       
 	/*Plan initToMove  resumeLastPlan   
 		//WARNING: THE MOVE CONTINUES (unitl timeout) AFTER A REACTION 
 	    robotLeft   speed(70)   time(1000 ) react event alarm -> stopTheRobot or event obstacle -> stopTheRobot ;      
 	    [ ?? tout(X,Y)] sound time(1500) file("./audio/illogical_most2.wav");
 	    robotRight  speed(70)   time(1000 ) react event alarm -> stopTheRobot or event obstacle -> stopTheRobot ;      
	    [ ?? tout(X,Y)] sound time(1500) file("./audio/illogical_most2.wav") 
 	Plan cmdDriven                        
		println("wait for a command  " ) ;           
		sense time(6000000) usercmd ,  inputcmd -> continue ,  evalInputCmd ;   
  		[ ?? tout(X,Y)] switchToPlan endJob ; 
  		printCurrentEvent ;
  		//The robot executes a command given with to a button
   		onEvent usercmd :  usercmd( CMD ) -> println(evalRobotCmd(CMD) ) ; 
  		onEvent usercmd :  usercmd( X ) ->  actorOp execCmdGui(X)  ; 
  						  //execCmdGui is defined in RobotActor, CmdUilInterpreter
  		[ !? actorOpDone(OP,R)]  println( actorOpDone(OP,R) ) ;	
  		repeatPlan
  	//The robot executes a command written as a string 
    Plan evalInputCmd   resumeLastPlan   
   		printCurrentEvent ;
  		println("evalInputCmd" ) ; 
  		onEvent inputcmd :  usercmd( CMD ) -> demo CMD   ; 
  		[ !? result(R)]  println(resultInputCmd(R)) 		
   	Plan stopTheRobot resumeLastPlan    
   		println("Stop the robot" )   ; 
   		sound time(1500) file("./audio/tada2.wav");
  		robotStop speed(10) time(0)	 
 	Plan prologFailure resumeLastPlan            
		println("Prolog goal FAILURE" )     
	Plan handleAlarm resumeLastPlan    
		println("handleAlarm" )       	  
	Plan endJob     
		sound time(3000) file("./audio/any_commander3.wav");
		println("endJob" )      */ 	  
}     