RobotSystem avatar    
/*       
 * ==============================================================
 * avatar
 * FEATURE : A Robot is a QActor that can execute remote commands
 * TO NOTE :    
 * ==============================================================
 */           
 
//EVENTI ROBOT               
Event alarm       : alarm(X)      //from red button  
Event obstacle    : obstacle(X)   //from red button and from SensorObserver
Event sensordata  : sensordata(X) //from SensorObserver

//EVENTI RADAR
Event sonar : p( Distance, SID   )    
Event numOfSonar : numOfSonar( N )  
Event obstacle: obstacle(X)
Event control:control(CMD)
Event endplay: endplay
Event stopRobot: stopRobot

//MESSAGGI RADAR
Dispatch polar    : p( Distance, SID )  

Context  ctxRobot  ip [ host="192.168.137.2"  port=8070 ] -standalone //CONTEXT ROBOT	 
EventHandler evh for  obstacle -print ;  

Context  ctxRadarTfCe16    ip [ host=/*"localhost"*/"192.168.1.103"  port=8033 ] -standalone //192.168.251.1 
Context ctxControllerTfCe16 ip[ host= /*"localhost"*/"192.168.1.103" port= 7034]
EventHandler evh for sonar -print  {  //event => dispatch
	forwardEvent radar_gui -m polar;
	forwardEvent controller -m polar
	//forwardEvent controltfce16 -m polar
};
Context  ctxSensorEmitter  ip [ host=/*"localhost"*/"192.168.1.103"  port=8133 ]  

QActor radar_gui context ctxRadarTfCe16  {	  	/*( R2 )*/  
	Plan init normal        
		println("RADAR init the GUI ... ") ;     
		actorOp activateGui ;
		switchToPlan doWorkMsgs      
	Plan doWorkMsgs 
 		println("RADAR receive") ;                      
		receiveMsg time ( 30000000 )  ; 
		printCurrentMessage ;
		onMsg polar : p(DIST,SID) -> actorOp sendDataToGui(DIST,SID) ;
 		repeatPlan  
 }

QActor controller context ctxControllerTfCe16{
	Plan init normal
		println("Controller init ...");
		switchToPlan work
		
	Plan work
		println("Working ...");
		receiveMsg time ( 30000000 )  ; 
		printCurrentMessage ;
		onMsg polar : p(80,2) -> emit stopRobot:stopRobot
		//actorOp receiveAndEvaluate;	//dopo la valutazione mette nella base di conoscenze se è necessario o meno fermare il robot
		//[?? command(playAlarm)] sound time(1500) file("./audio/illogical_most2.wav");
		//[?? command(stop)] emit stopRobot:stopRobot
		
	/*Plan tmp
		receiveMsg time ( 30000000 )  ; 
		printCurrentMessage ;
		onMsg polar : p(DIST,SID) -> println("PROVA") ;
		repeatPlan*/
}
 
QActor sensorsonar context ctxSensorEmitter  {    
Rules{
	/* THESE RULES ARE WRITTEN IN THE WorldTheory of the sensorsonar */
	/* CONFIGURATION   */
		onRaspberry.  
		mysonar( s1, coloryellow, /*"localhost"*/"192.168.1.103" ).	 
		//mysonar( s2, colorred, "192.168.251.121" ).		 
		//mysonar( s3, colorgreen, "192.168.251.120" ).	 		
	/* SIMULATION DATA */	   
   		p(80,1).p(70,1).p(60,1).p(50,3).p(40,3).p(30,3).p(20,2).p(40,2).p(60,2).p(80,2).
 	/* RULES */
		sonar(s1,1).
		sonar(s2,2).
 		sonar(s3,3).
		numOfSonars(N) :- bagof(sonar(S,P), sonar(S,P), SonarList), length(SonarList,N).	
		setmyposition  :-  
			numOfSonars(N),
			assert( numSonars( N ) ),
			mysonar( SONAR, _, _ ), sonar(SONAR,SID), 
			assert( position( SID ) ).		
		obstacledata( p(D,SID) ) :- 
			//numSonars( N ),
			actorOpDone( _,d(D) ), 	//set by actorOp getDistanceFromSonar (1)
			position(SID).
	}	  
 	Plan init normal     
 		println("sensorsonar STARTS")  ;
		[ !? onRaspberry ] actorOp startSonarC ;
  		demo setmyposition ;	//depends on mysonar
 		[ !? position(POS) ] println( position(POS) );
 		[ !? numSonars(N) ]  println( numSonars(N) );
 		[ !? numSonars(N) ]  emit numOfSonar : numOfSonar(N) ;
 		switchToPlan workSimulate ;
  		println("sensorsonar workReal")  ;       
  		[ !? onRaspberry ] switchToPlan workReal
 	Plan workSimulate   resumeLastPlan  
  	 	[ !? p(DIST, SID) ] println(p(DIST, SID)) else endPlan  "bye"; 	//p(D,SID) does not work
		[ ?? p(DIST, SID) ] emit sonar : p(DIST,SID) ;
		delay time(500) ;
		repeatPlan 9	 	
	Plan workReal 
		actorOp getDistanceFromSonar ;		//(1)
		[ !? obstacledata( VAL )] println( uuuuu(VAL) ) ;
		[ !? obstacledata( VAL )] emit sonar : VAL ;
//		[ ?? actorOpDone(OP,R )] println(R)	;	//remove actorOpDone
  		repeatPlan
}      
                 
                 
Robot nano0 QActor gundam context ctxRobot  {                    
   	Plan init normal                                      
  		println("gundam STARTS"  )  ;     		
 		//demo loadTheory("./talkTheoryAvatar.pl") ;     
 		//[ ?? goalResult(R)]  println(goalResult(R)) ;
 		switchToPlan main
 		
 	Plan main
 		robotForward speed(100) time(10000) react event stopRobot-> work;
 		repeatPlan
 	
 	Plan work 
 		robotLeft speed(100) time(1000);
 		//INIZIO BLINK LED
 		actorOp takeAndSendPhoto;
 		robotRight speed(100) time(1000); 
 		//STOP BLINK LED
 		switchToPlan main
}     